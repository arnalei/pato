/*
Deployment script for DEAD_DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DEAD_DB"
:setvar DefaultFilePrefix "DEAD_DB"
:setvar DefaultDataPath "C:\Users\Admin\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\Admin\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key af739e45-6e68-4ca6-b0db-e316879d3e5e is skipped, element [dbo].[DEAD_TABLE].[Id] (SqlSimpleColumn) will not be renamed to DEAD_Id';


GO
PRINT N'Creating Table [dbo].[DEAD_TABLE]...';


GO
CREATE TABLE [dbo].[DEAD_TABLE] (
    [DEAD_Id]    NVARCHAR (50) NOT NULL,
    [DEAD_Name]  NVARCHAR (50) NOT NULL,
    [DEAD_Price] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([DEAD_Id] ASC)
);


GO
PRINT N'Creating Procedure [dbo].[DEAD_add]...';


GO
CREATE PROCEDURE [dbo].[DEAD_add]
	@DEAD_Id nvarchar(50),
	@DEAD_Name nvarchar(50),
	@DEAD_Price nvarchar(50)
AS
begin
insert into [DEAD_TABLE]
(DEAD_Id,DEAD_Name,DEAD_Price)
values
(@DEAD_Id,@DEAD_Name,@DEAD_Price)



end
GO
PRINT N'Creating Procedure [dbo].[DEAD_del]...';


GO
CREATE PROCEDURE [dbo].[DEAD_del]
	@DEAD_Id nvarchar(50)

AS
begin

delete
from [DEAD_TABLE]
where DEAD_Id=@DEAD_Id



end
GO
PRINT N'Creating Procedure [dbo].[DEAD_dis]...';


GO
CREATE PROCEDURE [dbo].[DEAD_dis]

AS
begin

select 
DEAD_Id as DEAD_Id,
DEAD_Name as DEAD_Name,
DEAD_Price as DEAD_Price
from [DEAD_TABLE]



end
GO
PRINT N'Creating Procedure [dbo].[DEAD_sea]...';


GO
CREATE PROCEDURE [dbo].[DEAD_sea]
	@DEAD_Name nvarchar(50)
	
AS
begin

select 
DEAD_Id as DEAD_Id,
DEAD_Name as DEAD_Name,
DEAD_Price as DEAD_Price
from [DEAD_TABLE]
where
DEAD_Id like @DEAD_Name or
DEAD_Name like @DEAD_Name or
DEAD_Price like @DEAD_Name


end
GO
PRINT N'Creating Procedure [dbo].[DEAD_upd]...';


GO
CREATE PROCEDURE [dbo].[DEAD_upd]
	@DEAD_Id nvarchar(50),
	@DEAD_Name nvarchar(50),
	@DEAD_Price nvarchar(50)
AS
begin
update DEAD_TABLE
set
DEAD_Id = isnull(@DEAD_Id,DEAD_Id),
DEAD_Name = isnull(@DEAD_Name,DEAD_Name),
DEAD_Price = isnull(@DEAD_Price,DEAD_Price)
end
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'af739e45-6e68-4ca6-b0db-e316879d3e5e')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('af739e45-6e68-4ca6-b0db-e316879d3e5e')

GO

GO
PRINT N'Update complete.';


GO
